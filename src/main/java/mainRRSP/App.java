/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mainRRSP;

import java.math.RoundingMode;
import java.text.DecimalFormat;

import javax.enterprise.inject.se.SeContainer;
import javax.enterprise.inject.se.SeContainerInitializer;

public class App {
	public static void main(String[] args) {

		//this is another way i found. in MainClass.java, there is a different way
		//A CDI container initializer for Java SE. An instance may be obtained by calling newInstance() static method.
	    //https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/se/SeContainerInitializer.html
		SeContainerInitializer containerInit = SeContainerInitializer.newInstance();
	    SeContainer container = containerInit.initialize();

	    Service service = container.select(Service.class).get();
	    service.test_writeJsonToFile();


	    container.close();
	    System.exit(0);
		
	}

	private static void RRSP_Tax_relationship_Analysis() {
		Service service = new Service();
		InputParam input = readThisYearIncomeInfo();
		for (int amountRRSP = 1000; amountRRSP < 21000; amountRRSP = amountRRSP + 1000) {
//		double amountRRSP = 20000;
			input.setAmountRRSP(amountRRSP);
			DecimalFormat df = new DecimalFormat("#.####");
			df.setRoundingMode(RoundingMode.CEILING);
			double netIncome = service.getNetIncome(input);
			double federalTax = schedule1_FederalTax(input);
			double ontarioTax = form428_OntarioTax(input);
			double incomeTaxDeducted = input.getCanadianTaxPaid();
			double finalTaxOwe = federalTax + ontarioTax - incomeTaxDeducted;
			System.out.println("Net income: " + df.format(netIncome) + ": RRSP: " + amountRRSP
					+ " : Total Tax need to pay: " + df.format(finalTaxOwe));
//			System.out.println("federal Tax: " + df.format(federalTax));
//			System.out.println("ontario Tax: " + df.format(ontarioTax));
//			System.out.println("Total Tax need to pay: " + (df.format(federalTax + ontarioTax)));
		}
	}

	private static double schedule1_FederalTax(InputParam input) {
		Service service = new Service();

		// step A - federal non refundable tax credit
		double federalCredit = service.calculateFederalNonRefundableTaxCredit();
//		System.out.println("federalCredit: " + federalCredit);
		// step B - federal tax on taxable income
		double federalTax = service.getFederalTax(service.getNetIncome(input));
//		System.out.println("federalTax: " + federalTax);
		// step C - net tax
		double federalUSTaxCredit = service.getFederalForeignTaxCredit_T2209(input);
//		System.out.println("federalUSTaxCredit: " + federalUSTaxCredit);
		double netTax = federalTax - federalCredit - federalUSTaxCredit;
//		System.out.println("netTax: " + netTax);

		return netTax;
	}

	private static double form428_OntarioTax(InputParam input) {
		Service service = new Service();
		
		// step A - Ontario non refundable tax credit
		double ontarioCredit = service.calculateOntarioNonRefundableTaxCredit();
		// step B - Ontario tax on taxable income
		double ontarioTax = service.getProvincialTax(service.getNetIncome(input));
		// step C - net tax
		double ontarioUSTaxCredit = service.getOntarioForeignTaxCredit_T2036(input);
		double netTax = ontarioTax - ontarioCredit - ontarioUSTaxCredit;

		return netTax;
	}

	private static InputParam readThisYearIncomeInfo() {
		InputParam inputs = new InputParam(35000, 7000, 100000, 22000, 1.29);
		return inputs;
	}
}
